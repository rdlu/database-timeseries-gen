=begin
#heavily based on https://github.com/brianfrankcooper/YCSB/blob/master/core/src/main/java/com/yahoo/ycsb/generator/ZipfianGenerator.java
#from Yahoo YCSB
#by Rodrigo Dlugokenski
#same licence applies (Apache 2.0)

* Unlike @ZipfianGenerator, this class scatters the "popular" items across the itemspace. Use this, instead of @ZipfianGenerator, if you
* don't want the head of the distribution (the popular items) clustered together.

Quick and dirty test:
z = ScrambledZipfian.new 1000
a = Array.new(1000) {|i| i = 0}
(1..10000).each do |i|
 a[z.next_value] += 1
end
a
[8, 6, 1, 7, 7, 7, 4, 5, 6, 3, 8, 8, 5, 4, 9, 3, 2, 7, 4, 6, 4, 5, 8, 11, 8, 5, 4, 4, 8, 8, 5, 7, 8, 6, 5, 5, 4, 8, 4, 2, 4, 7, 7, 6, 7, 7, 9, 6, 4, 8, 4, 6, 11, 15, 16, 15, 15, 10, 20, 16, 9, 11, 17, 13, 8, 8, 6, 4, 10, 4, 10, 4, 8, 6, 6, 5, 9, 8, 7, 5, 8, 8, 6, 8, 6, 7, 4, 7, 13, 8, 7, 11, 5, 10, 6, 8, 5, 7, 6, 10, 4, 11, 3, 4, 4, 13, 13, 9, 8, 9, 8, 12, 7, 5, 5, 13, 16, 10, 10, 16, 16, 12, 14, 11, 12, 16, 10, 18, 4, 11, 8, 11, 7, 8, 6, 7, 6, 5, 5, 9, 7, 5, 4, 4, 12, 10, 8, 9, 8, 12, 8, 12, 11, 8, 11, 15, 5, 5, 5, 11, 9, 7, 2, 6, 10, 8, 2, 3, 8, 7, 11, 7, 8, 12, 11, 6, 27, 20, 15, 25, 29, 26, 21, 22, 3, 1, 12, 11, 22, 21, 5, 11, 8, 2, 8, 1, 2, 8, 9, 11, 3, 6, 6, 3, 5, 7, 5, 11, 7, 8, 3, 5, 1, 5, 7, 8, 10, 10, 6, 3, 6, 8, 6, 3, 9, 7, 3, 7, 5, 6, 5, 6, 11, 17, 6, 9, 3, 4, 8, 6, 9, 20, 22, 16, 12, 13, 10, 15, 5, 5, 5, 8, 11, 3, 8, 8, 10, 6, 11, 7, 7, 8, 10, 6, 13, 9, 5, 5, 9, 5, 8, 6, 12, 13, 15, 11, 9, 11, 4, 12, 10, 13, 7, 7, 6, 5, 5, 6, 28, 24, 22, 22, 26, 30, 34, 24, 8, 5, 8, 3, 9, 9, 17, 29, 11, 6, 6, 4, 11, 12, 7, 9, 7, 4, 5, 5, 5, 4, 5, 11, 9, 12, 6, 8, 6, 2, 6, 9, 9, 7, 5, 3, 4, 3, 5, 7, 5, 8, 5, 7, 5, 7, 9, 7, 7, 6, 3, 7, 5, 6, 8, 8, 6, 3, 4, 6, 4, 9, 4, 3, 10, 13, 10, 9, 4, 8, 9, 9, 5, 6, 10, 13, 6, 7, 10, 10, 5, 7, 5, 4, 15, 8, 8, 9, 8, 8, 2, 8, 9, 7, 3, 4, 9, 4, 15, 8, 8, 10, 7, 6, 5, 8, 9, 4, 10, 5, 5, 13, 9, 5, 6, 8, 7, 7, 7, 6, 10, 9, 9, 5, 12, 6, 8, 7, 6, 9, 9, 6, 3, 5, 11, 2, 2, 9, 4, 7, 13, 5, 9, 6, 6, 4, 8, 10, 4, 5, 5, 14, 9, 10, 4, 5, 6, 8, 9, 5, 8, 10, 5, 8, 11, 4, 61, 55, 75, 79, 99, 116, 166, 213, 420, 487, 4, 10, 15, 9, 7, 4, 8, 9, 11, 14, 9, 10, 23, 14, 13, 18, 4, 9, 1, 5, 11, 6, 6, 8, 9, 3, 14, 7, 6, 5, 7, 8, 10, 13, 14, 10, 15, 13, 10, 6, 9, 12, 7, 10, 6, 5, 9, 14, 10, 13, 5, 2, 9, 6, 10, 11, 7, 11, 37, 33, 11, 6, 7, 7, 48, 39, 54, 59, 39, 29, 32, 28, 8, 6, 11, 6, 7, 3, 5, 2, 4, 8, 8, 8, 4, 3, 9, 10, 6, 8, 5, 14, 9, 5, 6, 3, 5, 7, 12, 7, 8, 6, 6, 10, 13, 15, 8, 5, 5, 10, 7, 2, 3, 4, 8, 3, 8, 7, 7, 6, 8, 5, 6, 5, 5, 12, 8, 8, 8, 4, 6, 4, 5, 7, 7, 4, 5, 7, 5, 7, 3, 7, 10, 10, 13, 10, 12, 18, 8, 13, 8, 9, 10, 4, 6, 8, 7, 3, 7, 4, 11, 3, 8, 6, 2, 8, 5, 7, 10, 8, 7, 5, 7, 4, 4, 8, 10, 9, 10, 6, 8, 9, 11, 11, 8, 3, 9, 3, 12, 5, 5, 7, 5, 8, 11, 4, 11, 8, 7, 7, 9, 3, 7, 6, 5, 4, 9, 3, 4, 5, 7, 7, 8, 8, 10, 5, 5, 4, 5, 7, 6, 2, 2, 8, 11, 11, 5, 4, 8, 9, 10, 3, 4, 10, 12, 13, 13, 13, 8, 11, 6, 7, 12, 5, 4, 11, 12, 17, 19, 20, 13, 14, 21, 17, 21, 15, 7, 11, 13, 8, 3, 5, 9, 7, 8, 7, 7, 5, 6, 14, 5, 5, 4, 5, 6, 5, 7, 4, 2, 8, 9, 11, 12, 8, 10, 9, 7, 11, 6, 9, 8, 6, 9, 2, 9, 8, 12, 11, 7, 10, 10, 6, 7, 7, 12, 5, 10, 9, 5, 5, 9, 4, 6, 3, 6, 7, 7, 5, 6, 5, 3, 8, 6, 9, 5, 5, 3, 9, 8, 11, 7, 9, 8, 8, 9, 5, 5, 4, 12, 2, 4, 8, 5, 3, 5, 8, 7, 10, 8, 14, 9, 8, 8, 2, 6, 7, 7, 5, 7, 4, 14, 6, 5, 11, 13, 13, 5, 7, 6, 10, 2, 13, 4, 11, 11, 5, 7, 9, 9, 9, 5, 8, 6, 2, 6, 5, 8, 6, 5, 4, 11, 6, 6, 8, 6, 14, 7, 4, 10, 8, 8, 5, 13, 14, 12, 10, 10, 5, 15, 10, 10, 15, 6, 14, 7, 7, 5, 9, 10, 9, 4, 3, 3, 7, 4, 8, 6, 5, 7, 8, 2, 6, 11, 7, 13, 6, 9, 12, 7, 7, 4, 7, 7, 6, 6, 4, 4, 10, 7, 3, 2, 4, 4, 3, 6, 5, 13, 6, 5, 3, 9, 6, 5, 7, 24, 20, 17, 20, 14, 9, 11, 24, 22, 17, 6, 4, 10, 5, 11, 7, 8, 4, 5, 5, 5, 8, 8, 4, 10, 7, 6, 9, 9, 7, 5, 6, 9, 5, 5, 7, 5, 12, 4, 4, 7, 5, 4, 4, 8, 3, 7, 6, 4, 6, 6, 6, 9, 6, 10, 5, 6, 8, 8, 5, 3, 7, 2, 8]
=end
require_relative './zipfian.rb'
require_relative './fnv.rb'

class ScrambledZipfian
  #to scramble the distribuition you need a much higher number of items (a FACTOR of original requested number), that will be moduled to num of items (generated_value % num_of_items)
  def initialize(num_items, z_constant = 0.99, factor = 100000)
    @z_constant = z_constant
    @items = num_items
    @last_value = 0
    @gen = Zipfian.new(num_items * factor, @z_constant)
  end

  def next_value
    a = @gen.next_value
    @last_value = FNV.calculate(a.to_s,64).modulo(@items)
  end

  def last_value
    @last_value
  end

end
